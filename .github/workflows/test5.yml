# GENERATED BY ./ci.generate.ts -- DO NOT DIRECTLY EDIT

name: ci
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
concurrency:
  group: '${{ github.workflow }}-${{ !contains(github.event.pull_request.labels.*.name, ''ci-test-flaky'') && github.head_ref || github.run_id }}'
  cancel-in-progress: true
jobs:
  build:
    name: '${{ matrix.job }} ${{ matrix.profile }} ${{ matrix.os }}'
    runs-on: '${{ matrix.runner || matrix.os }}'
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - os: macos-12
            job: test
            profile: debug
          - os: macos-12
            job: test
            profile: release
            skip_pr: true
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''windows-2022-xl'' || ''windows-2022'' }}'
            job: test
            profile: debug
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''windows-2022-xl'' || ''windows-2022'' }}'
            runner: '${{ github.event_name == ''pull_request'' && ''windows-2022'' || (github.repository == ''sim4n6/temporary'' && ''windows-2022-xl'' || ''windows-2022'') }}'
            job: test
            profile: release
            skip_pr: true
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''ubuntu-22.04-xl'' || ''ubuntu-22.04'' }}'
            job: test
            profile: release
            use_sysroot: true
            wpt: '${{ !startsWith(github.ref, ''refs/tags/'') }}'
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''ubuntu-22.04-xl'' || ''ubuntu-22.04'' }}'
            job: bench
            profile: release
            use_sysroot: true
            skip_pr: '${{ !contains(github.event.pull_request.labels.*.name, ''ci-bench'') }}'
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''ubuntu-22.04-xl'' || ''ubuntu-22.04'' }}'
            job: test
            profile: debug
            use_sysroot: true
            wpt: '${{ github.ref == ''refs/heads/main'' && !startsWith(github.ref, ''refs/tags/'') }}'
          - os: '${{ github.repository == ''sim4n6/temporary'' && ''ubuntu-22.04-xl'' || ''ubuntu-22.04'' }}'
            job: lint
            profile: debug
      fail-fast: '${{ github.event_name == ''pull_request'' || (github.ref != ''refs/heads/main'' && !startsWith(github.ref, ''refs/tags/'')) }}'
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: full
    steps:
      - name: install gsutil
        run: | 
          # Define the URL and filename for the Google Cloud SDK
          SDK_URL="https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-441.0.0-linux-x86_64.tar.gz";
          SDK_FILENAME="google-cloud-sdk-441.0.0-linux-x86_64.tar.gz"

          # Download the Google Cloud SDK
          echo "Downloading Google Cloud SDK..."
          curl -O $SDK_URL

          # Extract the downloaded archive
          echo "Extracting Google Cloud SDK..."
          tar -xvf $SDK_FILENAME

          # Remove the downloaded archive to save space
          rm $SDK_FILENAME

          # Install the Google Cloud SDK
          echo "Installing Google Cloud SDK..."
          ./google-cloud-sdk/install.sh

          # Initialize the Google Cloud SDK
          echo "Initializing Google Cloud SDK..."
          ./google-cloud-sdk/bin/gcloud init --skip-diagnostics --no-browser --console-only

          # Add gsutil to the PATH by updating .bashrc
          echo "Adding gsutil to PATH..."
          echo 'export PATH=$PATH:$HOME/google-cloud-sdk/bin' >> $HOME/.bashrc

          # Reload .bashrc to apply changes to the current session
          source $HOME/.bashrc

          # Verify the installation
          echo "Verifying gsutil installation..."
          gsutil version

          echo "Installation complete. gsutil is now available."

      - name: Upload release to dl.deno.land (unix)
        run: 'gsutil -h "Cache-Control: public, max-age=3600" cp ./target/release/*.zip gs://dl.deno.land/release/${GITHUB_REF#refs/*/}/'
      - name: Upload release to dl.deno.land (windows)
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (runner.os == 'Windows' &&
          matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'sim4n6/temporary' &&
          startsWith(github.ref, 'refs/tags/')))
        env:
          CLOUDSDK_PYTHON: '${{env.pythonLocation}}\python.exe'
        run: 'gsutil -h "Cache-Control: public, max-age=3600" cp ./target/release/*.zip gs://dl.deno.land/release/${GITHUB_REF#refs/*/}/'
      - name: Create release notes
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'sim4n6/temporary' &&
          startsWith(github.ref, 'refs/tags/')))
        run: |-
          export PATH=$PATH:$(pwd)/target/release
          ./tools/release/05_create_release_notes.ts
      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v0.1.15
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'sim4n6/temporary' &&
          startsWith(github.ref, 'refs/tags/')))
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          files: |-
            target/release/deno-x86_64-pc-windows-msvc.zip
            target/release/deno-x86_64-unknown-linux-gnu.zip
            target/release/deno-x86_64-apple-darwin.zip
            target/release/deno_src.tar.gz
            target/release/lib.deno.d.ts
          body_path: target/release/release-notes.md
          draft: true
      - name: Save cache build output (main)
        uses: actions/cache/save@v3
        if: '!(github.event_name == ''pull_request'' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != ''true'' && ((matrix.job == ''test'' || matrix.job == ''lint'') && github.ref == ''refs/heads/main''))'
        with:
          path: |-
            ./target
            !./target/*/gn_out
            !./target/*/*.zip
            !./target/*/*.tar.gz
          key: '18-cargo-target-${{ matrix.os }}-${{ matrix.profile }}-${{ matrix.job }}-${{ github.sha }}'
  publish-canary:
    name: publish canary
    runs-on: ubuntu-22.04
    needs:
      - build
    if: github.repository == 'sim4n6/temporary' && github.ref == 'refs/heads/main'
    steps:
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          project_id: denoland
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true
          create_credentials_file: true
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: denoland
      - name: Upload canary version file to dl.deno.land
        run: |-
          echo ${{ github.sha }} > canary-latest.txt
          gsutil -h "Cache-Control: no-cache" cp canary-latest.txt gs://dl.deno.land/canary-latest.txt
