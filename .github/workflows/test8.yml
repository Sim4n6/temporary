name: Build Vue files

on:
  pull_request:
    types: [synchronize, opened]

permissions:
  actions: read
  checks: none
  contents: write
  deployments: none
  issues: write
  packages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Detect branch for PR
        id: vars
        run: |
          PR="${{ github.event.pull_request.number }}"

          PR_INFO=$( curl \
                   --request GET \
                   --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
                   --header 'content-type: application/json' \
                   --url https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR )
          REF=$(echo "${PR_INFO}" | jq -r .head.ref)
          BASE=$(echo "${PR_INFO}" | jq -r .head.repo.full_name)
          STATE=$(echo "${PR_INFO}" | jq -r .state)
          BASE_SHA=$(echo "${PR_INFO}" | jq -r .base.sha)

          if [[ $STATE == "closed" ]]
          then
            echo "Pull Request already closed."
            exit 0;
          fi

          echo "islocalbranch=$(expr $BASE == $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
          echo "branch=$REF" >> $GITHUB_OUTPUT
          echo "base=$BASE_SHA" >> $GITHUB_OUTPUT
      - name: force vue modification
        run: echo "vue_modified=1" >> $GITHUB_OUTPUT
        
      - name: Prepare git config
        run: |
          cat <<- EOF > $HOME/.netrc
            machine github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
            machine api.github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
          EOF
          chmod 600 $HOME/.netrc
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          if [[ ${{ steps.vars.outputs.islocalbranch }} ]]
          then
            git fetch --depth=1 origin $BRANCH_NAME
            git checkout $BRANCH_NAME
          fi
        env:
          BRANCH_NAME: ${{ steps.vars.outputs.branch }}
        if: steps.vars.outputs.branch != '' && steps.vuecheck.outputs.vue_modified == '1'
